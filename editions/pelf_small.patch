--- ./pelf
+++ ./pelf_small
@@ -229,14 +229,14 @@
 fi
 
 # Create a tar archive of the executable, libraries and additional files
-if ! tar -C "$tmp_dir" -czf "$outer_tmp_dir/archive.tar.gz" .; then
-    echo "Compression failed" >&2
+if ! tar -C "$tmp_dir" -cf - . | gzip -9 > "$outer_tmp_dir/archive.tar.gz"; then
+    echo "Compression failed. Do you have gzip?" >&2
     exit 1
 fi
 
 # Create a self-extracting script
 HOST_INFO="$(uname -mrspv)"
-VERSION="1.7_vanilla" # replace "vanilla" with whatever your custom edition is!
+VERSION="1.7_small" # replace "small" with whatever your custom edition is!
 
 # Generate the loader script with conditional LD_LIBRARY_PATH replacements
 LOADER_SCRIPT=$(sed -e "s|__ENTRY_POINT__|$basename_src|g" \
@@ -244,9 +244,10 @@
                         -e "s|__PELF_HOST__|$HOST_INFO|g" <<'END_OF_LOADER_SCRIPT'
 #!/bin/sh
 
-# This file was automatically generated by PELF. Find out more about it here: https://github.com/xplshn/pelf
-# Please DO NOT EDIT this file, unless you are testing for changes/fixes. If you found the need to modify
-# PELF's behavior, submit a PR of your "PELF EDITION" if you think it is appropiate.                    -
+# This file was automatically generated by PELF_small. Find out more about it here: https://github.com/xplshn/pelf
+# Please DO NOT EDIT this file, use `pelf_extract` and then create another bundle in case you need to modify something here.
+# Any attempts to modify a .small bundle will fail because of the binary data contained within it.
+# - If you found the need to modify the loader's behavior, submit a PR of your "PELF EDITION" if you think it is appropiate.
 
 # Get the binary's name
 [ -n "$EXE_NAME" ] || EXE_NAME="__ENTRY_POINT__"
@@ -303,8 +304,8 @@
 
         # Construct the variable name by appending _bindir to $rEXENAME
         var_name="${rEXE_NAME}_bindir"
-        # Decode the base64-encoded archive and extract it
-        mkdir -p "$TMPDIR" && tail -n +$ARCHIVE_MARKER "$0" | base64 -d | tar -xzf - -C "$TMPDIR" >/dev/null 2>&1 || {
+        # Find the archive and extract it
+        mkdir -p "$TMPDIR" && tail -n +$ARCHIVE_MARKER "$0" | tar -xzf - -C "$TMPDIR" >/dev/null 2>&1 || {
             # Use eval to check if the constructed variable name exists and is not empty
             echo "Extraction failed" >&2
             eval "var_value=\"\${$var_name}\""
@@ -385,19 +386,13 @@
 
 # Add extra binaries to the PATH, if they are there.
 if [ -d "$binDir" ]; then
-    count=0
-    for _ in "$binDir"/*; do
-        count=$((count + 1))
-    done
-    if [ "$count" -gt 1 ]; then
-        if [ -z "$found_runningInstance" ] || [ "$found_runningInstance" != "1" ]; then
-            varname=$(echo "$rEXE_NAME" | sed 's/[-.]\([a-zA-Z]\)/\U\1/g; s/[-.]//g')
-            export "${varname}_bindir"="$binDir"
-            export "${varname}_lib"="$libDir"
-        fi
-        xPATH="$binDir"
-        # Just to be safe. What if another bundle removes a library that we happen to be sharing? (during the cleanup step)
-        USE_BULKLIBS=0
+    if [ "$(ls -1 "$binDir" | wc -l)" -gt 1 ]; then
+            if [ -z "$found_runningInstance" ] || [ "$found_runningInstance" != "1" ]; then
+                export "$(echo "$rEXE_NAME" | sed -E 's/[-.]([a-zA-Z])/\U\1/g; s/[-.]//g')_bindir"="$binDir"
+                export "$(echo "$rEXE_NAME" | sed -E 's/[-.]([a-zA-Z])/\U\1/g; s/[-.]//g')_lib"="$libDir"
+            fi
+            xPATH="$binDir"
+            USE_BULKLIBS=0
     fi
 fi
 
@@ -509,8 +504,8 @@
 )
 
 echo "$LOADER_SCRIPT" > "$dst"
-# Append the base64-encoded archive to the self-extracting script
-base64 <"$outer_tmp_dir/archive.tar.gz" >> "$dst" || exit 1
+# Append the archive to the self-extracting script
+cat "$outer_tmp_dir/archive.tar.gz" >> "$dst" || exit 1
 
 # Make the self-extracting script executable
 chmod +x "$dst" || exit 1
