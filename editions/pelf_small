#!/bin/sh

# Copyright <2024> xplshn
# 
# Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
# 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
# 3. Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS “AS IS” AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# PELF. Pack an ELF.
# PELF receives a binary as its first argument and an output as its second argument. It will pack all the necessary libraries that it needs to run, except the libC and LD. Generated files may include optional files inside, be it a library, binary, folder, icons, desktop file, etc.

# shellcheck disable=SC3028
# In POSIX sh, RANDOM is undefined.

# Check if the required arguments are provided
if [ "$#" -lt 3 ]; then
    echo "Usage: $0 [--main-bin [BINARY]|--add-appdir [AppDir] [EXE_NAME]] [--output-to OUTPUT.AppBundle] <--add-library [LIB_PATH]|--add-binary [BIN_PATH]|--add-metadata [icon128x128.xpm|icon128x128.png|icon.svg|app.desktop]|--add-arbitrary [DIR|FILE]>" >&2
    exit 1
fi

# Create a temporary directory for bundling the files
outer_tmp_dir="/tmp/pelf_$(date '+%s%M%S')_$RANDOM"
tmp_dir="$outer_tmp_dir/blob"
mkdir -p "$tmp_dir" || exit 1
# Trap all termination signals
trap 'rm -rf "$outer_tmp_dir"' INT TERM HUP QUIT EXIT
#trap -- IGNORE KILL

# Function to figure out what libraries the binaries need/depend on.
add_thelibs() {
 # Copy the libraries from the executable to the temporary directory
 SOs="$(ldd "$1")"
 echo "$SOs" | awk '
     # Store the first word of the first line
     NR == 1 { first_word = $1 }
     # For lines with =>, check if the third word is not the same as the first word of the first line
     /=>/ && $3 != first_word { print $3 }
    '| while read -r lib; do
         mkdir -p "$tmp_dir/lib"
         cp -L "$lib" "$tmp_dir/lib" || exit 1
       done
}

# Function to handle adding libraries
add_library() {
    lib="$1"
    mkdir -p "$tmp_dir/bin"
    cp -L "$lib" "$tmp_dir/lib" || exit 1
    add_thelibs "$lib" || exit 1
}

# Function to handle adding binaries
add_binary() {
    binary="$1"
    add_thelibs "$binary"
    mkdir -p "$tmp_dir/bin"
    cp -L "$binary" "$tmp_dir/bin/$(basename "$binary")" || exit 1
}

add_arbitrary() {
    cp -LR "$1" "$tmp_dir" || { echo "Failed to copy arbitrary files"; exit 1; }
}

add_metadata() {
    case "$1" in
        *.png | *.xpm | *.svg)
            mkdir -p "$tmp_dir/bundledMetadata" || { echo "Failed to create directory"; exit 1; }
            cp -LR -- "$1" "$tmp_dir/bundledMetadata/icon.${1##*.}" || { echo "Failed to copy icon file"; exit 1; }
            ;;
        *.desktop)
            # Extract Exec, Icon, and TryExec lines from the .desktop file, trimming any trailing whitespace
            EXEC_LINE=$(awk '{ gsub(/^[ \t]*|[ \t]*$/,""); print }' <"$1" | awk -F= 'tolower($1) == "exec" { print $2; exit }')
            TRYEXEC_LINE=$(awk '{ gsub(/^[ \t]*|[ \t]*$/,""); print }' <"$1" | awk -F= 'tolower($1) == "tryexec" { print $2; exit }')
            
            # Check if the dst name matches the exec name in the provided .desktop
            if [ "$(basename "$dst")" != "${EXEC_LINE%% *}" ]; then
                printf "WARNING: The bundle name does not match the 'Exec=' line in the .desktop file.\n"
                printf "The embedded 'Exec=' line says: %s, which does not match: %s\n" "${EXEC_LINE%% *}" "$dst"
                printf "Consider renaming the bundle to match or adjust the .desktop file accordingly.\n"
            fi

            # Check if the TryExec line exists and matches the dst name
            if [ -n "$TRYEXEC_LINE" ] && [ "$dst" != "${TRYEXEC_LINE%% *}" ]; then
                printf "WARNING: The 'TryExec=' line in the .desktop file does not match the bundle's name.\n"
                printf "The embedded 'TryExec=' line says: %s\n" "${TRYEXEC_LINE%% *}"
                printf "Adjust the .desktop file to reflect the correct 'TryExec=' line.\n\n"
            fi

            mkdir -p "$tmp_dir/bundledMetadata" || { echo "Failed to create directory"; exit 1; }
            cp -LR -- "$1" "$tmp_dir/bundledMetadata/app.desktop" || { echo "Failed to copy desktop file"; exit 1; }
            ;;
        *)
            printf "File extension not supported.\nNote: If you supply an icon, size **SHOULD** be 128x128\n"
            exit 1
            ;;
    esac
}

# These will be overriden. In case they are not, something's gone terribly wrong
src="xsrc"
dst="xdst"
# Process the received arguments
while [ "$#" -gt 0 ]; do
    case "$1" in
        --output-to)
            dst="$2"
            shift 2
            ;;
        --add-appdir)
            if [ -d "$2" ]; then
                if [ -n "$3" ]; then
                    basename_src="$(printf '%s\n' "$(basename "$3")" | tr -dc '[:alnum:]_' | tr '[:upper:]' '[:lower:]')"
                else
                    echo "You MUST supply a VALID, LOWERCASE-ONLY string conformed of alphanumeric characters to be used as the value of $EXE_NAME inside of the bundles."
                    exit 1
                fi
        
                # Process each item in the top level of the provided directory, excluding . and ..
                for item in "$2"/* "$2"/.[!.]* "$2"/..?*; do
                    [ -e "$item" ] && [ "$item" != "$2/." ] && [ "$item" != "$2/.." ] && add_arbitrary "$item"
                done
        
                if [ ! -f "$2/AppRun" ]; then
                    echo "$2/AppRun doesn't exist."
                    exit 1
                fi
        
                NO_COPYMAIN="true"
            else
                echo "Directory $2 does not exist." >&2
                exit 1
            fi
            shift 3
            ;;
        --main-bin)
            if [ "$2" = "--plain" ] && [ -f "$3" ]; then
                NO_COPYMAIN="true"
                src="$3"
                shift 3
            elif [ -f "$2" ]; then
                src="$2"
                shift 2
            else
                echo "Error: '$2' isn't a file" >&2
                exit 1
            fi
            ;;
        --add-library)
            if [ -z "$NO_COPYMAIN"  ]; then
                if [ -f "$2" ]; then
                    add_library "$2"
                else
                    echo "$2 does not exist." >&2
                    exit 1
                fi
                shift 2
            else
                echo "You cannot use this feature along with APPDIRS. Use the command getlibs at pelf/cmd if that's what you are trying to do. You can also use --add-arbitrary and name your dir usr/lib"
            fi
            ;;
        --add-binary)
            if [ -z "$NO_COPYMAIN"  ]; then
                if [ -f "$2" ]; then
                    add_binary "$2"
                else
                    echo "$2 does not exist." >&2
                    exit 1
                fi
                shift 2
            else
                echo "You cannot use this feature along with APPDIRS. Use the command getlibs at pelf/cmd if that's what you are trying to do. You can also use --add-arbitrary and name your dir usr/bin and usr/lib for the bin's libraries"
            fi
            ;;
        --add-metadata)
            if [ -f "$2" ]; then
                add_metadata "$2"
            else
                echo "Metadata file $2 does not exist." >&2
                exit 1
            fi
            shift 2
            ;;
        --add-arbitrary)
            if [ -d "$2" ] || [ -f "$2" ]; then
                add_arbitrary "$2"
            else
                echo "$2 does not exist." >&2
                exit 1
            fi
            shift 2
            ;;
            --add-ld-and-libc)
            if [ -f "$2" ]; then
                file_basename=$(basename "$2")
                found_file=$(find "$tmp_dir" -name "$file_basename" -print -quit)
                if [ -n "$found_file" ]; then
                    mv "$found_file" "$tmp_dir/ld.so"
                else
                    cp "$2" "$tmp_dir/ld.so"
                fi
            fi
            if [ -f "$3" ]; then
                file_basename=$(basename "$3")
                found_file=$(find "$tmp_dir" -name "$file_basename" -print -quit)
                if [ -n "$found_file" ]; then
                    mv "$found_file" "$tmp_dir"
                else
                    cp "$3" "$tmp_dir"
                fi
                shift 1
            fi
            shift 2
            ;;
            *)
            echo "Unrecognized argument: $2"
            exit 1
            ;;
    esac
done

# Setup EXE_NAME correctly when we use `--main-bin` OR `--main-bin --plain`
[ -z "$basename_src" ] && basename_src="$(basename "$src")"
# Copy the main executable and its libraries to the temporary directory
if [ "$NO_COPYMAIN" != "true" ];then
    add_binary "$src" || exit 1
fi

# Create a tar archive of the executable, libraries and additional files
if ! tar -C "$tmp_dir" -cf - . | gzip -9 > "$outer_tmp_dir/archive.tar.gz"; then
    echo "Compression failed. Do you have gzip?" >&2
    exit 1
fi

# Create a self-extracting script
HOST_INFO="$(uname -mrspv)"
VERSION="1.7_small" # replace "small" with whatever your custom edition is!

# Generate the loader script with conditional LD_LIBRARY_PATH replacements
LOADER_SCRIPT=$(sed -e "s|__ENTRY_POINT__|$basename_src|g" \
                        -e "s|__PELF_VERSION__|$VERSION|g" \
                        -e "s|__PELF_HOST__|$HOST_INFO|g" <<'END_OF_LOADER_SCRIPT'
#!/bin/sh

# This file was automatically generated by PELF_small. Find out more about it here: https://github.com/xplshn/pelf
# Please DO NOT EDIT this file, use `pelf_extract` and then create another bundle in case you need to modify something here.
# Any attempts to modify a .small bundle will fail because of the binary data contained within it.
# - If you found the need to modify the loader's behavior, submit a PR of your "PELF EDITION" if you think it is appropiate.

# Get the binary's name
[ -n "$EXE_NAME" ] || EXE_NAME="__ENTRY_POINT__"
rEXE_NAME="$(echo "$EXE_NAME" | tr -dc '[:alnum:]_' | tr '[:upper:]' '[:lower:]')"
TMPDIR="/tmp/.pelfbundles/pbundle_$rEXE_NAME$(date '+%s%M%S')_$RANDOM"
LIBS_BULKDIR="/tmp/.pelfbundles/pbundle_libs"
cleanup() {
    if [ -z "$found_runningInstance" ] || [ "$found_runningInstance" != "1" ]; then
        # Delete individual files only if they are used exclusively by the current process
        for file in $REM_AFTERUSE; do
            if [ -z "$(fuser "$file" 2>/dev/null | grep "$EXE_NAME_PID")" ]; then
                rm "$file"
            fi
        done

        # Delete the directory
        rm -rf "$TMPDIR"
    fi
}
# Set up the trap
# Trap all termination signals
trap cleanup INT TERM HUP QUIT EXIT
trap -- IGNORE KILL
##############################

# BASH edition! This is kept for reference since its tidy and readable
# set_tmpdir_from_env() {
#    var_name="${rEXE_NAME}_bindir"
#    if [ -n "${!var_name}" ]; then
#        TMPDIR="$(dirname "${!var_name}")"
#        found_runningInstance=1
#        return 0
#    fi
#    return 1
#}

set_tmpdir_from_env() {
    var_name="${rEXE_NAME}_bindir"
    if [ -n "$var_name" ]; then
        eval "bindir=\$$var_name"
        if [ -n "$bindir" ]; then
            TMPDIR="$(dirname "$bindir")"
            found_runningInstance=1
            return 0
        fi
    fi
    return 1
}

set_tmpdir_from_env
if [ -z "$found_runningInstance" ] || [ "$found_runningInstance" != "1" ] && [ "$REUSE_INSTANCES" != "1" ]; then
        # Find the start position of the archive
        ARCHIVE_MARKER=$(awk '/^__ARCHIVE_MARKER__/ { print NR + 1; exit }' "$0")

        # Construct the variable name by appending _bindir to $rEXENAME
        var_name="${rEXE_NAME}_bindir"
        # Find the archive and extract it
        mkdir -p "$TMPDIR" && tail -n +$ARCHIVE_MARKER "$0" | tar -xzf - -C "$TMPDIR" >/dev/null 2>&1 || {
            # Use eval to check if the constructed variable name exists and is not empty
            echo "Extraction failed" >&2
            eval "var_value=\"\${$var_name}\""
            exit 1
        }
fi

# Function to check if a library is found in system paths
is_library_in_system() {
    library=$1
    if [ -e "/usr/lib/$library" ] || [ -e "/lib/$library" ] || [ -e "/lib64/$library" ]; then
        return 0 # Library found in system
    else
        return 1 # Library not found in system
    fi
}

# Check if USE_SYSTEM_LIBRARIES is set to 1 or doesn't exist
if [ "${USE_SYSTEM_LIBRARIES:-0}" -eq 1 ]; then
    for lib_file in "$TMPDIR/lib/"*; do
        lib_name=$(basename "$lib_file")

        if is_library_in_system "$lib_name"; then
            if [ "$SHOW_DISCARDPROCESS" -eq 1 ]; then
                echo "$lib_name found in system. Using the system's library."
            fi
            rm "$lib_file"
        else
            if [ "$SHOW_DISCARDPROCESS" -eq 1 ]; then
                echo "$lib_name not found in system. Using the bundl
ed library."
            fi
        fi
    done 2>/dev/null
fi

mv_u() {
  SRC_DIR="$1"
  DEST_DIR="$2"

  # Loop through each file in the source directory
  for file in "$SRC_DIR"/*; do
    # Check if the file is a regular file
    [ -f "$file" ] || continue
    # Extract the filename from the path
    filename=$(basename "$file")
    # Check if the file does not exist in the destination directory or is newer
    if [ ! -e "$DEST_DIR/$file" ]; then
      REM_AFTERUSE="$REM_AFTERUSE $DEST_DIR/$filename "
      mv "$file" "$DEST_DIR/"
    elif [ "$(find "$file" -newer "$DEST_DIR/$filename" 2>/dev/null)" ]; then
      # Move the file to the destination directory
      mv "$file" "$DEST_DIR/"
    fi
  done
}

# .AppBundle format support
libDir="$TMPDIR/lib"
binDir="$TMPDIR/bin"
binDest="$binDir/$EXE_NAME"
pngI128x128="$TMPDIR/bundledMetadata/icon.png"
### .AppDir format support
# Determine binDest
[ ! -f "$binDest" ] && binDest="$TMPDIR/AppRun"
# Determine binDir
[ ! -d "$binDir" ] && binDir="$TMPDIR/usr/bin"
# Determine libDir
[ ! -d "$libDir" ] && libDir="$TMPDIR/usr/lib"
# Determine pngI128x128
[ ! -f "$pngI128x128" ] && pngI128x128="$TMPDIR/.DirIcon"

# Check if binDest exists
if [ ! -f "$binDest" ]; then
    echo "Error: $binDest does NOT exist. And that is this bundle's entrypoint."
    exit 1
fi

# Add extra binaries to the PATH, if they are there.
if [ -d "$binDir" ]; then
    count=0
    for _ in "$binDir"/*; do
        count=$((count + 1))
    done
    if [ "$count" -gt 1 ]; then
        if [ -z "$found_runningInstance" ] || [ "$found_runningInstance" != "1" ]; then
            varname=$(echo "$rEXE_NAME" | sed 's/[-.]\([a-zA-Z]\)/\U\1/g; s/[-.]//g')
            export "${varname}_bindir"="$binDir"
            export "${varname}_lib"="$libDir"
        fi
        xPATH="$binDir"
        # Just to be safe. What if another bundle removes a library that we happen to be sharing? (during the cleanup step)
        USE_BULKLIBS=0
    fi
fi

# Figure out what we do
case "$1" in
    --pbundle_help)
        printf "This bundle was generated automatically by PELF __PELF_VERSION__, the machine on which it was created has the following \"uname -mrspv\":\n %s \n" "__PELF_HOST__"
        printf "Usage:\n <--pbundle_help|--pbundle_list|--pbundle_link <binary>|--pbundle_xpmIcon|--pbundle_pngIcon|--pbundle_svgIcon|--pbundle_desktop|--pbundle_genThumbnail> <args...>\n"
        printf "EnvVars:\n USE_BULKLIBS=[0,1]\n USE_SYSTEM_LIBRARIES=[1,0]\n SHOW_DISCARDPROCESS=[0,1]\n REUSE_INSTANCES=[0,1]\n"
        exit 1
        ;;
    --pbundle_list)
        ls -FAl "$TMPDIR" && \
        ls -FAl "$binDir" && \
        test -d "$libDir" && ls -FAl "$libDir"
        exit 1
        ;;
    --pbundle_link)
        binDest="$2"
        shift 2
        ;;
    --pbundle_pngIcon)
        if [ -f "$pngI128x128" ]; then
            base64 "$pngI128x128"
            exit 0
        else
            exit 1
        fi
        ;;
    --pbundle_xpmIcon)
        icon_path="$TMPDIR/bundledMetadata/icon.xpm"
        if [ -f "$icon_path" ]; then
            base64 "$icon_path"
            exit 0
        else
            exit 1
        fi
        ;;
    --pbundle_svgIcon)
        icon_path="$TMPDIR/bundledMetadata/icon.svg"
        if [ -f "$icon_path" ]; then
            base64 "$icon_path"
            exit 0
        else
            exit 1
        fi
        ;;
    --pbundle_desktop)
        desktop_path="$TMPDIR/bundledMetadata/app.desktop"
        if [ -f "$desktop_path" ]; then
            base64 "$desktop_path"
            exit 0
        else
            exit 1
        fi
        ;;
    --pbundle_genThumbnail)
        if [ -f "$binDir/.pelf_thumbgen" ]; then
            if [ -f "$pngI128x128" ]; then
                "$binDir/.pelf_thumbgen" "$0" "$pngI128x128"
                exit 0
            else
                echo "$pngI128x128 does not exist"
            fi
        else
            echo "Sorry, this bundle does not contain .pelf_thumbgen, add that binary if you wish to enable this functionality. (github.com/xplshn/pelf/tree/master/cmd/misc/thumbgen)"
        fi
        exit 1
        ;;
esac

if [ "${USE_BULKLIBS:-0}" -eq 1 ]; then
    mkdir -p "$LIBS_BULKDIR"
    mv_u "$libDir" "$LIBS_BULKDIR"
    libDir="$LIBS_BULKDIR"
else
    libDir="$libDir"
fi

# Append to PATH-like variables if they exist, otherwise set them
if [ -z "$LD_LIBRARY_PATH" ]; then
    LD_LIBRARY_PATH="$libDir"
else
    LD_LIBRARY_PATH="$LD_LIBRARY_PATH:$libDir"
fi

if [ -z "$PATH" ]; then
    PATH="$xPATH"
else
    PATH="$PATH:$xPATH"
fi

# Append to XDG_DATA_DIRS if it exists and we have ./share || ./usr/share directories
if [ -n "$XDG_DATA_DIRS" ]; then
    [ -d "$TMPDIR/share" ] && XDG_DATA_DIRS="$XDG_DATA_DIRS:$TMPDIR/share"
    [ -d "$TMPDIR/usr/share" ] && XDG_DATA_DIRS="$XDG_DATA_DIRS:$TMPDIR/usr/share"
fi

# Handle LD_PRELOAD appending if it exists
if [ -z "$LD_PRELOAD" ]; then
    LD_PRELOAD="$libDir/libToPreload.so"
else
    LD_PRELOAD="$LD_PRELOAD:$libDir/libToPreload.so"
fi

# Set the LD_LOADER if we have one
SELF_TEMPDIR="$TMPDIR"
LD_LOADER="$TMPDIR/ld.so"
if ! ldd "$binDest" >/dev/null 2>&1; then
    LD_LOADER=""
fi

# Proceed to execute the packed ENTRY POINT binary
if [ -f "$LD_LOADER" ]; then
    "$LD_LOADER" "$binDest" "$@" || exit 1
    EXE_NAME_PID="$!"
else
    "$binDest" "$@"
    EXE_NAME_PID="$!"
fi

exit $?
__ARCHIVE_MARKER__
END_OF_LOADER_SCRIPT
)

echo "$LOADER_SCRIPT" > "$dst"
# Append the archive to the self-extracting script
cat "$outer_tmp_dir/archive.tar.gz" >> "$dst" || exit 1

# Make the self-extracting script executable
chmod +x "$dst" || exit 1
