#!/bin/sh

[ "$DEBUG" = "1" ] && set -x

# Strip the first character from ARGS and ARGV0 (assuming it's '!')
ARGS="$(echo "$ARGS" | cut -c2-)"

# shellcheck disable=SC2086 # Split ARGS into command and its arguments
set -- $ARGS
CMD="$1"
shift # Remove the command from the list, leaving the arguments in $@

# Force the use of the rootfs' binaries, and only after that, use the user's
oPATH="$PATH"
PATH="/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:$PATH"

# Check if ARGV0 is available as a command. We remove the "./" that might prepend ARGV0
if command -v "${ARGV0%.*}" >/dev/null 2>&1; then
    # If ARGV0 is available, execute ARGV0 with its arguments
    PATH="$oPATH" exec "${ARGV0%.*}" "$ARGS" # Because ARGS' first element was not in fact the CMD
elif command -v "$CMD" >/dev/null 2>&1; then
    # If CMD (the first part of ARGS) is available, execute it with remaining arguments
    PATH="$oPATH" exec "$CMD" "$@"
else
    echo "Error: Neither ARGV0 ('${ARGV0%.*}') nor ARGS ('$CMD') are available in \$PATH"
    exit 1
fi
